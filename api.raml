#%RAML 0.8
title: Jira
version: 2
baseUri: "{protocol}://{domain}/rest/api/{version}"
securitySchemes:
  - basic: !include securitySchemes/basic.raml
schemas:
  - appProperties: !include schemas/appProperties-schema.json
  - appPropertyReq: !include schemas/appPropertyReq-schema.json
  - attachment: !include schemas/attachment-schema.json
  - attachmentMeta: !include schemas/attachmentMeta-schema.json
  - settings: !include schemas/settings-schema.json
  - cropInstructions: !include schemas/cropInstructions-schema.json
  - systemAvatar: !include schemas/systemAvatar-schema.json
  - commentPropertiesKeys: !include schemas/commentPropertiesKeys-schema.json
  - commentProperty: !include schemas/commentProperty-schema.json
  - componentViaPostReq: !include schemas/componentViaPostReq-schema.json
  - componentViaPost: !include schemas/componentViaPost-schema.json
  - componentViaPutReq: !include schemas/componentViaPutReq-schema.json
  - issueCountBean: !include schemas/issueCountBean-schema.json
  - customFieldOption: !include schemas/customFieldOption-schema.json
  - dashboards: !include schemas/dashboards-schema.json
  - dashboard: !include schemas/dashboard-schema.json
  - fields: !include schemas/fields-schema.json
  - fieldReq: !include schemas/fieldReq-schema.json
  - filterReq: !include schemas/filterReq-schema.json
  - filter: !include schemas/filter-schema.json
  - scope: !include schemas/scope-schema.json
  - filters: !include schemas/filters-schema.json
  - group: !include schemas/group-schema.json
  - groupsuggestions: !include schemas/groupsuggestions-schema.json
  - issueReq: !include schemas/issueReq-schema.json
  - issue: !include schemas/issue-schema.json
  - errorMessages: !include schemas/errorMessages-schema.json
  - issuesReq: !include schemas/issuesReq-schema.json
  - issues: !include schemas/issues-schema.json
  - elementErrors: !include schemas/elementErrors-schema.json
  - updateIssueReq: !include schemas/updateIssueReq-schema.json
  - representationIssue: !include schemas/representationIssue-schema.json
  - assignee: !include schemas/assignee-schema.json
  - issueComments: !include schemas/issueComments-schema.json
  - commentReq: !include schemas/commentReq-schema.json
  - comment: !include schemas/comment-schema.json
  - issueMeta: !include schemas/issueMeta-schema.json
  - notification: !include schemas/notification-schema.json
  - remotelink: !include schemas/remotelink-schema.json
  - remoteReq: !include schemas/remoteReq-schema.json
  - remoteIssueLink: !include schemas/remoteIssueLink-schema.json
  - issueLink: !include schemas/issueLink-schema.json
  - transitions: !include schemas/transitions-schema.json
  - transitionReq: !include schemas/transitionReq-schema.json
  - voters: !include schemas/voters-schema.json
  - watchers: !include schemas/watchers-schema.json
  - worklogs: !include schemas/worklogs-schema.json
  - worklog: !include schemas/worklog-schema.json
  - issueProjects: !include schemas/issueProjects-schema.json
  - attachments: !include schemas/attachments-schema.json
  - issueLinkReq: !include schemas/issueLinkReq-schema.json
  - link: !include schemas/link-schema.json
  - issueLinkTypes: !include schemas/issueLinkTypes-schema.json
  - issueLinkTypesReq: !include schemas/issueLinkTypesReq-schema.json
  - issueLinkType: !include schemas/issueLinkType-schema.json
  - issueTypes: !include schemas/issueTypes-schema.json
  - issueType: !include schemas/issueType-schema.json
  - autoCompleteData: !include schemas/autoCompleteData-schema.json
  - permission: !include schemas/permission-schema.json
  - user: !include schemas/user-schema.json
  - userPutReq: !include schemas/userPutReq-schema.json
  - userPutRes: !include schemas/userPutRes-schema.json
  - priorities: !include schemas/priorities-schema.json
  - issuePriority: !include schemas/issuePriority-schema.json
  - projects: !include schemas/projects-schema.json
  - projectRepresentation: !include schemas/projectRepresentation-schema.json
  - avatar: !include schemas/avatar-schema.json
  - temporaryAvatar: !include schemas/temporaryAvatar-schema.json
  - avatars: !include schemas/avatars-schema.json
  - components: !include schemas/components-schema.json
  - statuses: !include schemas/statuses-schema.json
  - versions: !include schemas/versions-schema.json
  - role: !include schemas/role-schema.json
  - addActor: !include schemas/addActor-schema.json
  - actor: !include schemas/actor-schema.json
  - errorCollection: !include schemas/errorCollection-schema.json
  - reindex: !include schemas/reindex-schema.json
  - resolutions: !include schemas/resolutions-schema.json
  - resolution: !include schemas/resolution-schema.json
  - tab: !include schemas/tab-schema.json
  - tabFields: !include schemas/tabFields-schema.json
  - searchResults: !include schemas/searchResults-schema.json
  - searchRequest: !include schemas/searchRequest-schema.json
  - securitylevel: !include schemas/securitylevel-schema.json
  - serverInfo: !include schemas/serverInfo-schema.json
  - issueStatuses: !include schemas/issueStatuses-schema.json
  - issueStatus: !include schemas/issueStatus-schema.json
  - statusCategories: !include schemas/statusCategories-schema.json
  - statusCategory: !include schemas/statusCategory-schema.json
  - userPostReq: !include schemas/userPostReq-schema.json
  - users: !include schemas/users-schema.json
  - password: !include schemas/password-schema.json
  - usersList: !include schemas/usersList-schema.json
  - versionReq: !include schemas/versionReq-schema.json
  - positionReq: !include schemas/positionReq-schema.json
  - version: !include schemas/version-schema.json
  - issuesUnresolvedCount: !include schemas/issuesUnresolvedCount-schema.json
  - remoteVersionLinks: !include schemas/remoteVersionLinks-schema.json
  - remoteVersionLinksReq: !include schemas/remoteVersionLinksReq-schema.json
  - transitionProperties: !include schemas/transitionProperties-schema.json
  - transitionPropertyReq: !include schemas/transitionPropertyReq-schema.json
  - workflowschemeReq: !include schemas/workflowschemeReq-schema.json
  - workflowscheme: !include schemas/workflowscheme-schema.json
  - workflowschemePutReq: !include schemas/workflowschemePutReq-schema.json
  - draft: !include schemas/draft-schema.json
  - workflowName: !include schemas/workflowName-schema.json
  - workflowNameReq: !include schemas/workflowNameReq-schema.json
  - workflowIssueTypeReq: !include schemas/workflowIssueTypeReq-schema.json
  - workflowIssueType: !include schemas/workflowIssueType-schema.json
  - workflowMappings: !include schemas/workflowMappings-schema.json
  - workflowMappingsReq: !include schemas/workflowMappingsReq-schema.json
  - credentialsReq: !include schemas/credentialsReq-schema.json
  - credentials: !include schemas/credentials-schema.json
  - userSession: !include schemas/userSession-schema.json
  - remoteVersionLink: !include schemas/remoteVersionLink-schema.json
  - remoteVersionLinkReq: !include schemas/remoteVersionLinkReq-schema.json
  - avatarTemporary: !include schemas/avatarTemporary-schema.json
resourceTypes:
  - base: !include resourceTypes/base.raml
  - workflowschemeReturned: !include resourceTypes/workflowschemeReturned.raml
traits:
  - hasUsername: !include traits/hasUsername.raml
  - hasKey: !include traits/hasKey.raml
  - hasExpand: !include traits/hasExpand.raml
  - hasMaxResults: !include traits/hasMaxResults.raml
  - hasWorkflowName: !include traits/hasWorkflowName.raml
  - hasStartAt: !include traits/hasStartAt.raml
securedBy: [ basic ]
/application-properties: 
  type: base
  get: 
    is: [ hasKey ]
    description: Returns an application property.
    queryParameters: 
      permissionLevel: 
        description: when fetching a list specifies the permission level of all items in the list see {@link com.atlassian.jira.bc.admin.ApplicationPropertiesService.EditPermissionLevel}
      keyFilter: 
        description: |
          when fetching a list allows the list to be filtered by the property's start of key e.g. "jira.lf.*" whould fetch only those permissions that are editable and whose keys start with "jira.lf.". This is a regex.
    responses: 
      200: 
        body: 
          application/json: 
            schema: appProperties
            example: !include examples/appProperties-example.json
      400: 
        description: Returned if the property does not exist or the currently authenticated user does not have permission to view it.
  /{id}: 
    type: base
    put: 
      description: 'Modify an application property via PUT. The "value" field present in the PUT will override thee existing value.'
      body: 
        application/json: 
          schema: appPropertyReq
          example: !include examples/appPropertyReq-example.json
      responses: 
        200: 
          description: Returned if the version exists and the currently authenticated user has permission to edit it.
        403: 
          description: Returned if the currently authenticated user does not have permission to edit the version.
        404: 
          description: Returned if the version does not exist or the currently authenticated user does not have permission to view it.
/attachment: 
  /{id}: 
    type: base
    uriParameters: 
      id: 
        description: The id of the attachment to delete.
    get: 
      description: Returns the meta-data for an attachment, including the URI of the actual attached file.
      responses: 
        200: 
          body: 
            application/json: 
              schema: attachment
              example: !include examples/attachment-example.json
        404: 
          description: Returned if the attachment with the given id does not exist, or is not accessible by the calling user.
    delete: 
      description: Remove an attachment from an issue.
      responses: 
        204: 
          description: Returned if successful.
        403: 
          description: "Returned if attachments is disabled or if you don't have permission to remove attachments from this issue."
        404: 
          description: Returned if the attachment is not found
  /meta: 
    type: base
    get: 
      description: Returns the meta informations for an attachments, specifically if they are enabled and the maximum upload size allowed.
      responses: 
        200: 
          body: 
            application/json: 
              schema: attachmentMeta
              example: !include examples/attachmentMeta-example.json
/auditing/settings: 
  type: base
  get: 
    description: Returns current Auditing settings.
    responses: 
      200: 
        body: 
          application/json: 
            schema: settings
            example: !include examples/settings-example.json
  put: 
    description: Changed current Auditing settings Returns REST representation for the requested group.
    responses: 
      200: 
        body: 
          application/json: 
            schema: settings
            example: !include examples/settings-example.json
      401: 
        description: Returned if the current user is not a sysadmin.
/avatar/{type}: 
  uriParameters: 
    type: 
      description: the avatar type
  /temporaryCrop: 
    type: base
    post: 
      description: Updates the cropping instructions of the temporary avatar.
      body: 
        application/json: 
          schema: cropInstructions
          example: !include examples/cropInstructions-example.json
      responses: 
        201: 
        400: 
          description: Returned if the cropping coordinates are invalid
        500: 
          description: Returned if an error occurs while cropping the temporary avatar
  /temporary: 
    type: base
    post: 
      description: Creates temporary avatar
      queryParameters: 
        filename: 
          description: name of file being uploaded
        size: 
          description: size of file
          type: number
      responses: 
        201: 
          body: 
            application/json: 
              schema: avatarTemporary
              example: !include examples/avatarTemporary-example.json
        400: 
          description: Valiation failed. For example filesize is beyond max attachment size.
        403: 
          description: Returned if the request does not conain a valid XSRF token
        500: 
          description: Returned if an error occurs while converting temporary avatar to real avatar
  /system: 
    type: base
    get: 
      description: Returns all system avatars of the given type.
      responses: 
        200: 
          body: 
            application/json: 
              schema: systemAvatar
              example: !include examples/systemAvatar-example.json
        500: 
          description: Returned if an error occurs while retrieving the list of avatars.
